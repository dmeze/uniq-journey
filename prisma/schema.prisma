generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Cart {
  id       String     @id @db.Uuid
  userId   String     @unique @db.Uuid
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  products CartItem[]
  total    Int?
  count    Int?
}

model CartItem {
  id            String       @id @db.Uuid
  cartId        String       @db.Uuid
  perfumeId     String?      @db.Uuid
  userPerfumeId String?      @db.Uuid
  cart          Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  perfume       Perfume?     @relation(fields: [perfumeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userPerfume   UserPerfume? @relation(fields: [userPerfumeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantity      Int          @default(1)
  price         Int
  size          String

  @@unique([cartId, perfumeId, userPerfumeId, size])
}

model Perfume {
  id        String         @id @db.Uuid
  name      String         @unique
  imageURLs String[]
  aromas    PerfumeAroma[]
  Carts     CartItem[]
  OrderItem OrderItem[]
}

model UserPerfume {
  id          String             @id @db.Uuid
  name        String?
  description String?
  imageUrl    String?
  size        String
  aromas      UserPerfumeAroma[]
  userId      String             @db.Uuid
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Carts       CartItem[]
  OrderItem   OrderItem[]
}

model UserPerfumeAroma {
  userPerfume   UserPerfume @relation(fields: [userPerfumeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  aroma         Aroma       @relation(fields: [aromaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteType      AromaType
  userPerfumeId String      @db.Uuid
  aromaId       String      @db.Uuid

  @@unique([userPerfumeId, aromaId, noteType])
}

model User {
  id          String        @id @db.Uuid
  name        String?
  phone       String?
  email       String?       @unique
  city        String?
  warehouse   String?
  password    String?
  carts       Cart[]
  orders      Order[]
  userPerfume UserPerfume[]
}

model Order {
  id         String      @id @default(uuid()) @db.Uuid
  userId     String      @db.Uuid
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  total      Int
  products   OrderItem[]
  status     OrderStatus @default(PENDING)
  createDate DateTime    @default(now())
}

model OrderItem {
  id            String       @id @default(uuid()) @db.Uuid
  orderId       String       @db.Uuid
  perfumeId     String?      @db.Uuid
  userPerfumeId String?      @db.Uuid
  order         Order        @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  perfume       Perfume?     @relation(fields: [perfumeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userPerfume   UserPerfume? @relation(fields: [userPerfumeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantity      Int          @default(1)
  price         Int
  size          String

  @@unique([orderId, perfumeId, userPerfumeId, size])
}

model Aroma {
  id               String             @id @db.Uuid
  name             String             @unique
  perfumes         PerfumeAroma[]
  UserPerfumeAroma UserPerfumeAroma[]
}

model PerfumeAroma {
  perfume   Perfume   @relation(fields: [perfumeId], references: [id], onDelete: Cascade)
  aroma     Aroma     @relation(fields: [aromaId], references: [id], onDelete: Cascade)
  noteType  AromaType
  perfumeId String    @db.Uuid
  aromaId   String    @db.Uuid

  @@id([perfumeId, aromaId])
}

enum AromaType {
  HIGH
  MIDDLE
  BASE
}

enum OrderStatus {
  PENDING
  SHIPPING
  DONE
}
